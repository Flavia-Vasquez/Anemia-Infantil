# -*- coding: utf-8 -*-
"""proceso_ análisis1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yNhZUMY88FI8O7mCX88yHgquYRvohj24
"""

import matplotlib.pyplot as plt

# Filtrar datos relevantes (sin columnas categóricas para el análisis numérico)
numeric_data = df.iloc[:, 2:]

# Calcular estimadores estadísticos
descriptive_stats = numeric_data.describe().T  # Transponer para claridad
descriptive_stats["Range"] = descriptive_stats["max"] - descriptive_stats["min"]
descriptive_stats

# Gráficos: Evolución temporal de los indicadores de anemia
plt.figure(figsize=(12, 6))
for indicator in df["Indicador Anemia %"].unique():
    subset = df[df["Indicador Anemia %"] == indicator]
    mean_values = subset.iloc[:, 2:].mean()
    plt.plot(mean_values.index, mean_values.values, label=indicator)

# Personalización del gráfico
plt.title("Evolución temporal de los indicadores de anemia", fontsize=14)
plt.xlabel("Año", fontsize=12)
plt.ylabel("Porcentaje (%)", fontsize=12)
plt.legend(title="Indicador", fontsize=10)
plt.grid(True, linestyle="--", alpha=0.6)
plt.xticks(rotation=45)
plt.show()

# Interpretación
interpretacion = """
Interpretación:
1. La anemia leve muestra una tendencia ligeramente ascendente, pasando del 20% al 23% en los últimos años.
2. La anemia moderada tiene una disminución significativa, reduciéndose de un 18% a un 9% aproximadamente.
3. La anemia severa permanece estable en niveles muy bajos, oscilando entre el 2% y el 1.2%.
4. El porcentaje total de anemia muestra una tendencia descendente moderada, pasando del 40% a 33%, con algunos altibajos recientes.

Conclusión:
La disminución de la anemia moderada es un punto positivo, mientras que la anemia leve parece mantenerse como un desafío constante. Es crucial seguir trabajando en estrategias de prevención y tratamiento para reducir el impacto total de la anemia.
"""

print(interpretacion)

def grafico_estadistico(departamento, indicador):
    """
    Genera un gráfico estadístico (líneas) para un indicador en un departamento específico a lo largo de los años.

    Args:
        departamento (str): Nombre del departamento.
        indicador (str): Indicador de anemia (e.g., 'Leve', 'Moderada', 'Severa', 'Total').

    Returns:
        fig (matplotlib.figure.Figure): Objeto de la figura generada.
    """
    # Filtrar los datos por el departamento y el indicador
    departamento_data = df[(df['Departamento'] == departamento) &
                             (df['Indicador Anemia %'] == indicador)]

    if departamento_data.empty:
        raise ValueError(f"No se encontraron datos para el departamento '{departamento}' y el indicador '{indicador}'.")

    # Extraer los años y los valores
    anios = [col for col in df.columns if isinstance(col, int)]
    valores = departamento_data[anios].values.flatten()

    # Crear el gráfico
    fig, ax = plt.subplots()
    ax.plot(anios, valores, marker='o', linestyle='-', color='green')
    ax.set_title(f'Tendencia de {indicador} en {departamento}')
    ax.set_xlabel('Año')
    ax.set_ylabel('Porcentaje (%)')
    ax.grid(True)
    plt.tight_layout()

    return fig

def interpretar_grafico(departamento, indicador):
    """
    Interpreta los datos para el gráfico basado en el departamento y el indicador seleccionados.

    Args:
        departamento (str): Nombre del departamento.
        indicador (str): Indicador de anemia (e.g., 'Leve', 'Moderada', 'Severa', 'Total').

    Returns:
        str: Resumen interpretativo de los datos.
    """
    # Filtrar los datos
    departamento_data = df[(df['Departamento'] == departamento) &
                             (df['Indicador Anemia %'] == indicador)]

    if departamento_data.empty:
        return f"No se encontraron datos para el departamento '{departamento}' y el indicador '{indicador}'."

    # Extraer años y valores
    anios = [col for col in df.columns if isinstance(col, int)]
    valores = departamento_data[anios].values.flatten()

    # Calcular estadísticas clave
    valor_min = valores.min()
    anio_min = anios[valores.argmin()]
    valor_max = valores.max()
    anio_max = anios[valores.argmax()]
    tendencia = "aumento" if valores[-1] > valores[0] else "disminución"

    # Crear un resumen
    resumen = (
        f"Análisis del indicador '{indicador}' en {departamento}:\n"
        f"- Año con el valor más bajo: {anio_min} ({valor_min}%)\n"
        f"- Año con el valor más alto: {anio_max} ({valor_max}%)\n"
        f"- Tendencia general: {tendencia} a lo largo de los años.\n"
    )

    return resumen




# Crear un gráfico de ejemplo para "AMAZONAS" y el indicador "Total"
example_stat_fig = grafico_estadistico('AYACUCHO', 'Leve')
plt.show()

# Generar interpretación para "AMAZONAS" y "Total"
interpretacion = interpretar_grafico('AMAZONAS', 'Leve')
print(interpretacion)